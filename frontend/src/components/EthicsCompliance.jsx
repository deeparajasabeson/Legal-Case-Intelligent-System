import React, { useState, useEffect, useCallback } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Grid,
  Alert,
  CircularProgress,
  Paper,
  Tabs,
  Tab,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  Divider,
  LinearProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Tooltip,
  Accordion,
  AccordionSummary,
  AccordionDetails
} from '@mui/material';
import {
  Gavel as EthicsIcon,
  CheckCircle as CheckIcon,
  Warning as WarningIcon,
  Error as ErrorIcon,
  Info as InfoIcon,
  School as CompetenceIcon,
  Visibility as TransparencyIcon,
  Security as SecurityIcon,
  AccountBalance as SupervisionIcon,
  AttachMoney as BillingIcon,
  Refresh as RefreshIcon,
  Assessment as AssessmentIcon,
  ExpandMore as ExpandMoreIcon,
  Description as ReportIcon,
  Notification as NotificationIcon
} from '@mui/icons-material';

function EthicsCompliance({ currentUser, onAlertsUpdate }) {
  const [loading, setLoading] = useState(false);
  const [complianceData, setComplianceData] = useState(null);
  const [error, setError] = useState('');
  const [activeTab, setActiveTab] = useState(0);
  const [selectedAlert, setSelectedAlert] = useState(null);
  const [alertDialogOpen, setAlertDialogOpen] = useState(false);

  // Mock compliance data
  const mockComplianceData = {
    overall_compliance: 87,
    compliance_areas: {
      competence_compliance: 92,
      disclosure_compliance: 85,
      confidentiality_compliance: 95,
      supervision_compliance: 78,
      billing_compliance: 88
    },
    ethics_alerts: [
      {
        id: 'ALERT_001',
        type: 'AI_SUPERVISION_REQUIRED',
        severity: 'warning',
        message: 'AI-generated legal advice requires attorney supervision',
        details: 'Recent case analysis generated by AI requires attorney review and approval before client communication',
        timestamp: '2024-09-14T10:30:00Z',
        rule_reference: 'ABA Model Rule 5.5',
        action_required: 'Review and approve AI analysis',
        status: 'pending'
      },
      {
        id: 'ALERT_002',
        type: 'TECHNOLOGY_COMPETENCE_TRAINING_NEEDED',
        severity: 'info',
        message: 'Technology competence training due',
        details: 'Annual legal technology competence training is due within 30 days',
        timestamp: '2024-09-14T09:15:00Z',
        rule_reference: 'ABA Model Rule 1.1',
        action_required: 'Complete technology competence training',
        status: 'pending'
      },
      {
        id: 'ALERT_003',
        type: 'AI_DISCLOSURE_MISSING',
        severity: 'error',
        message: 'AI usage disclosure required',
        details: 'Client communication must include disclosure of AI assistance per ethical requirements',
        timestamp: '2024-09-14T08:45:00Z',
        rule_reference: 'ABA Model Rule 1.1',
        action_required: 'Add AI disclosure to client communications',
        status: 'critical'
      }
    ],
    professional_rules: [
      {
        rule: 'Model Rule 1.1',
        title: 'Competence',
        compliance_score: 92,
        last_review: '2024-09-01',
        requirements: [
          'Legal knowledge and skill reasonably necessary',
          'Technology competence including AI tools',
          'Continuing education requirements'
        ]
      },
      {
        rule: 'Model Rule 1.6',
        title: 'Confidentiality of Information',
        compliance_score: 95,
        last_review: '2024-09-01',
        requirements: [
          'Client confidentiality protection',
          'Secure technology systems',
          'Data encryption and access controls'
        ]
      },
      {
        rule: 'Model Rule 5.5',
        title: 'Unauthorized Practice of Law',
        compliance_score: 78,
        last_review: '2024-08-15',
        requirements: [
          'Attorney supervision of AI systems',
          'Professional judgment in AI outputs',
          'Client relationship requirements'
        ]
      }
    ],
    audit_history: [
      {
        date: '2024-09-01',
        type: 'Monthly Review',
        score: 87,
        issues_found: 3,
        issues_resolved: 2,
        status: 'completed'
      },
      {
        date: '2024-08-01',
        type: 'Monthly Review',
        score: 85,
        issues_found: 5,
        issues_resolved: 5,
        status: 'completed'
      }
    ]
  };

  useEffect(() => {
    loadComplianceData();
  }, []);

  useEffect(() => {
    if (complianceData?.ethics_alerts && onAlertsUpdate) {
      onAlertsUpdate(complianceData.ethics_alerts.map(alert => alert.message));
    }
  }, [complianceData, onAlertsUpdate]);

  const loadComplianceData = useCallback(async () => {
    setLoading(true);
    setError('');

    try {
      const response = await fetch(`/api/ethics-compliance?attorney_id=${currentUser.id}`);

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setComplianceData({
            ...mockComplianceData,
            ...data.compliance_status,
            ethics_alerts: data.ethics_alerts || mockComplianceData.ethics_alerts
          });
        } else {
          // Fallback to mock data
          setComplianceData(mockComplianceData);
        }
      } else {
        // Fallback to mock data
        setComplianceData(mockComplianceData);
      }
    } catch (err) {
      console.error('Compliance data error:', err);
      // Fallback to mock data
      setComplianceData(mockComplianceData);
    } finally {
      setLoading(false);
    }
  }, [currentUser.id]);

  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'error':
      case 'critical': return 'error';
      case 'warning': return 'warning';
      case 'info': return 'info';
      default: return 'default';
    }
  };

  const getSeverityIcon = (severity) => {
    switch (severity) {
      case 'error':
      case 'critical': return <ErrorIcon />;
      case 'warning': return <WarningIcon />;
      case 'info': return <InfoIcon />;
      default: return <CheckIcon />;
    }
  };

  const getComplianceColor = (score) => {
    if (score >= 90) return 'success';
    if (score >= 70) return 'warning';
    return 'error';
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString();
  };

  const handleAlertClick = (alert) => {
    setSelectedAlert(alert);
    setAlertDialogOpen(true);
  };

  const handleResolveAlert = (alertId) => {
    if (complianceData) {
      const updatedAlerts = complianceData.ethics_alerts.map(alert =>
        alert.id === alertId ? { ...alert, status: 'resolved' } : alert
      );
      setComplianceData({
        ...complianceData,
        ethics_alerts: updatedAlerts
      });
      setAlertDialogOpen(false);
    }
  };

  if (loading && !complianceData) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box>
      <Typography variant="h4" gutterBottom sx={{ mb: 3 }}>
        <EthicsIcon sx={{ mr: 2, verticalAlign: 'middle' }} />
        Legal Ethics Compliance
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      {complianceData && (
        <Box>
          {/* Overall Compliance Score */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'between', alignItems: 'center', mb: 3 }}>
                <Typography variant="h6">
                  <AssessmentIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                  Ethics Compliance Dashboard
                </Typography>
                <Button
                  variant="outlined"
                  startIcon={<RefreshIcon />}
                  onClick={loadComplianceData}
                  disabled={loading}
                >
                  Refresh
                </Button>
              </Box>

              <Grid container spacing={3}>
                <Grid item xs={12} md={4}>
                  <Paper sx={{ p: 3, textAlign: 'center' }}>
                    <Typography variant="h2" color={getComplianceColor(complianceData.overall_compliance)}>
                      {complianceData.overall_compliance}%
                    </Typography>
                    <Typography variant="h6" color="text.secondary">
                      Overall Compliance Score
                    </Typography>
                    <LinearProgress
                      variant="determinate"
                      value={complianceData.overall_compliance}
                      color={getComplianceColor(complianceData.overall_compliance)}
                      sx={{ mt: 2, height: 8, borderRadius: 4 }}
                    />
                  </Paper>
                </Grid>

                <Grid item xs={12} md={8}>
                  <Grid container spacing={2}>
                    {Object.entries(complianceData.compliance_areas).map(([area, score]) => (
                      <Grid item xs={12} sm={6} key={area}>
                        <Paper sx={{ p: 2 }}>
                          <Typography variant="body2" color="text.secondary" gutterBottom>
                            {area.replace('_', ' ').toUpperCase()}
                          </Typography>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                            <Typography variant="h5" sx={{ mr: 1 }}>
                              {score}%
                            </Typography>
                            <Chip
                              label={score >= 90 ? 'Excellent' : score >= 70 ? 'Good' : 'Needs Improvement'}
                              color={getComplianceColor(score)}
                              size="small"
                            />
                          </Box>
                          <LinearProgress
                            variant="determinate"
                            value={score}
                            color={getComplianceColor(score)}
                            sx={{ height: 4, borderRadius: 2 }}
                          />
                        </Paper>
                      </Grid>
                    ))}
                  </Grid>
                </Grid>
              </Grid>
            </CardContent>
          </Card>

          {/* Ethics Alerts */}
          {complianceData.ethics_alerts && complianceData.ethics_alerts.length > 0 && (
            <Card sx={{ mb: 3 }}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  <NotificationIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                  Active Ethics Alerts ({complianceData.ethics_alerts.filter(a => a.status !== 'resolved').length})
                </Typography>

                <List>
                  {complianceData.ethics_alerts
                    .filter(alert => alert.status !== 'resolved')
                    .map((alert) => (
                      <ListItem
                        key={alert.id}
                        button
                        onClick={() => handleAlertClick(alert)}
                        divider
                        sx={{
                          border: alert.severity === 'critical' ? 2 : 1,
                          borderColor: getSeverityColor(alert.severity) + '.main',
                          borderRadius: 1,
                          mb: 1
                        }}
                      >
                        <ListItemIcon>
                          {getSeverityIcon(alert.severity)}
                        </ListItemIcon>
                        <ListItemText
                          primary={
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Typography variant="body1" fontWeight="bold">
                                {alert.message}
                              </Typography>
                              <Chip
                                label={alert.severity.toUpperCase()}
                                color={getSeverityColor(alert.severity)}
                                size="small"
                              />
                            </Box>
                          }
                          secondary={
                            <Box>
                              <Typography variant="body2" color="text.secondary">
                                {alert.details}
                              </Typography>
                              <Typography variant="caption" color="primary">
                                Rule: {alert.rule_reference} | {formatDate(alert.timestamp)}
                              </Typography>
                            </Box>
                          }
                        />
                      </ListItem>
                    ))}
                </List>
              </CardContent>
            </Card>
          )}

          {/* Detailed Compliance Tabs */}
          <Card>
            <Tabs value={activeTab} onChange={handleTabChange} sx={{ borderBottom: 1, borderColor: 'divider' }}>
              <Tab label="Professional Rules" />
              <Tab label="Audit History" />
              <Tab label="Compliance Report" />
            </Tabs>

            {/* Professional Rules Tab */}
            {activeTab === 0 && (
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  ABA Model Rules Compliance
                </Typography>

                {complianceData.professional_rules.map((rule) => (
                  <Accordion key={rule.rule} sx={{ mb: 1 }}>
                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                      <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>
                        <Box sx={{ flexGrow: 1 }}>
                          <Typography variant="subtitle1" fontWeight="bold">
                            {rule.rule}: {rule.title}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            Last Review: {rule.last_review}
                          </Typography>
                        </Box>
                        <Chip
                          label={`${rule.compliance_score}%`}
                          color={getComplianceColor(rule.compliance_score)}
                          sx={{ mr: 2 }}
                        />
                      </Box>
                    </AccordionSummary>
                    <AccordionDetails>
                      <Typography variant="body2" color="text.secondary" gutterBottom>
                        Compliance Requirements:
                      </Typography>
                      <List dense>
                        {rule.requirements.map((requirement, index) => (
                          <ListItem key={index}>
                            <ListItemIcon>
                              <CheckIcon color="primary" fontSize="small" />
                            </ListItemIcon>
                            <ListItemText primary={requirement} />
                          </ListItem>
                        ))}
                      </List>
                    </AccordionDetails>
                  </Accordion>
                ))}
              </CardContent>
            )}

            {/* Audit History Tab */}
            {activeTab === 1 && (
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  Ethics Audit History
                </Typography>

                <TableContainer>
                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell>Date</TableCell>
                        <TableCell>Type</TableCell>
                        <TableCell>Score</TableCell>
                        <TableCell>Issues Found</TableCell>
                        <TableCell>Issues Resolved</TableCell>
                        <TableCell>Status</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {complianceData.audit_history.map((audit, index) => (
                        <TableRow key={index}>
                          <TableCell>{audit.date}</TableCell>
                          <TableCell>{audit.type}</TableCell>
                          <TableCell>
                            <Chip
                              label={`${audit.score}%`}
                              color={getComplianceColor(audit.score)}
                              size="small"
                            />
                          </TableCell>
                          <TableCell>{audit.issues_found}</TableCell>
                          <TableCell>{audit.issues_resolved}</TableCell>
                          <TableCell>
                            <Chip
                              label={audit.status.toUpperCase()}
                              color={audit.status === 'completed' ? 'success' : 'warning'}
                              size="small"
                            />
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </CardContent>
            )}

            {/* Compliance Report Tab */}
            {activeTab === 2 && (
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  <ReportIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                  Compliance Report Generation
                </Typography>

                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <Paper sx={{ p: 3 }}>
                      <Typography variant="h6" gutterBottom>
                        Monthly Compliance Report
                      </Typography>
                      <Typography variant="body2" color="text.secondary" paragraph>
                        Generate comprehensive compliance report for bar association filing.
                      </Typography>
                      <Button variant="contained" startIcon={<ReportIcon />}>
                        Generate Report
                      </Button>
                    </Paper>
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <Paper sx={{ p: 3 }}>
                      <Typography variant="h6" gutterBottom>
                        AI Usage Disclosure
                      </Typography>
                      <Typography variant="body2" color="text.secondary" paragraph>
                        Generate client disclosure documents for AI assistance usage.
                      </Typography>
                      <Button variant="outlined" startIcon={<TransparencyIcon />}>
                        Create Disclosure
                      </Button>
                    </Paper>
                  </Grid>
                </Grid>
              </CardContent>
            )}
          </Card>
        </Box>
      )}

      {/* Alert Details Dialog */}
      <Dialog
        open={alertDialogOpen}
        onClose={() => setAlertDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          {selectedAlert && (
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              {getSeverityIcon(selectedAlert.severity)}
              <Typography variant="h6" sx={{ ml: 1 }}>
                Ethics Alert Details
              </Typography>
            </Box>
          )}
        </DialogTitle>
        <DialogContent>
          {selectedAlert && (
            <Box>
              <Typography variant="h6" gutterBottom>
                {selectedAlert.message}
              </Typography>
              <Typography variant="body1" paragraph>
                {selectedAlert.details}
              </Typography>
              <Divider sx={{ my: 2 }} />
              <Typography variant="body2" color="text.secondary">
                <strong>Rule Reference:</strong> {selectedAlert.rule_reference}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                <strong>Action Required:</strong> {selectedAlert.action_required}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                <strong>Timestamp:</strong> {formatDate(selectedAlert.timestamp)}
              </Typography>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setAlertDialogOpen(false)}>
            Close
          </Button>
          {selectedAlert && (
            <Button
              variant="contained"
              color="primary"
              onClick={() => handleResolveAlert(selectedAlert.id)}
            >
              Mark as Resolved
            </Button>
          )}
        </DialogActions>
      </Dialog>

      {/* Legal Ethics Notice */}
      <Alert severity="info" sx={{ mt: 3 }}>
        <Typography variant="body2">
          <strong>Professional Responsibility Notice:</strong> This system continuously monitors compliance with
          ABA Model Rules of Professional Conduct and applicable state bar regulations. All ethics alerts must
          be addressed promptly to maintain professional standing and client trust.
        </Typography>
      </Alert>
    </Box>
  );
}

export default EthicsCompliance;